{
  "name": "connect-uglify-js",
  "version": "0.0.2",
  "description": "Middleware for Connect to uglify JavaScript files",
  "keywords": [
    "javascript",
    "uglify-js",
    "connect",
    "middleware"
  ],
  "author": {
    "name": "eric thul",
    "email": "thul.eric@gmail.com"
  },
  "contributors": [
    {
      "name": "eric thul",
      "email": "thul.eric@gmail.com"
    }
  ],
  "dependencies": {
    "uglify-js": ">= 2",
    "bassline": ">= 0.0.4"
  },
  "devDependencies": {
    "jasmine-node": ">= 1.0.13",
    "request": ">= 2.9.100",
    "connect": ">= 1.8.5"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/ethul/connect-uglify-js/raw/master/LICENSE"
    }
  ],
  "bugs": {
    "url": "https://github.com/ethul/connect-uglify-js/issues"
  },
  "main": "./index.js",
  "repository": {
    "type": "git",
    "url": "https://ethul@github.com/ethul/connect-uglify-js.git"
  },
  "readme": "# Connect-uglify-js\n\nConnect-uglify-js is middleware for\n[connect](http://www.senchalabs.org/connect/) that uses\n[uglify-js](https://github.com/mishoo/UglifyJS) to compress and mangle\nyour JavaScript.\n\nThis middleware uses a memory caching strategy by default, which means\nthat once a JavaScript file has been uglified, the result is stored into\nthe cache, and the life of the cache is the life of the node instance.\n\n## Installation\n\n* Install connect-uglify-js with NPM\n\n        npm install connect-uglify-js\n\n## Getting Started: Express server demo\n\n```javascript\nvar express = require(\"express\")\n  , uglify = require(\"connect-uglify-js\")\n  , app = module.exports = express.createServer();\n\napp.configure(function(){\n  app.set(\"views\", __dirname + \"/views\");\n  app.set(\"view engine\", \"jade\");\n  app.use(express.bodyParser());\n  app.use(express.methodOverride());\n  app.use(express.static(__dirname + \"/public\"));\n  app.use(\"/assets\",uglify.middleware(__dirname + \"/public/javascripts\"));\n  app.use(app.router);\n});\n\napp.configure(\"development\", function(){\n  app.use(express.errorHandler({ dumpExceptions: true, showStack: true })); \n});\napp.configure(\"production\", function(){\n  app.use(express.errorHandler()); \n});\n\napp.get(\"/\", function(request,response){response.render(\"index\",{});});\n\napp.listen(process.env.PORT || 3000);\nconsole.log(\"Express server listening on port %d in %s mode\", app.address().port, app.settings.env);\n```\n\nAbove we have added the middleware to our application mounted under\n`/assets`. It is recommended to pick a mount point, otherwise the\nmiddleware will conflict with the serving of static files.\n\nTo complete the example, we can write our HTML to request the uglified\nJavaScript as follows, assuming `index.js` exists in\n`__dirname/public/javascripts`.\n\n```jade\n!!! 5\nhead\n  meta(charset=\"utf-8\")\n  title Demo\nbody\n  h1 Demo\n  script(src=\"/assets/index.js\")\n```\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/ethul/connect-uglify-js",
  "_id": "connect-uglify-js@0.0.2",
  "dist": {
    "shasum": "9c64ba683e981a261290c6f1a2f5210156e32dc7",
    "tarball": "http://registry.npmjs.org/connect-uglify-js/-/connect-uglify-js-0.0.2.tgz"
  },
  "_from": "connect-uglify-js@*",
  "_npmVersion": "1.3.14",
  "_npmUser": {
    "name": "ethul",
    "email": "thul.eric@gmail.com"
  },
  "maintainers": [
    {
      "name": "ethul",
      "email": "thul.eric@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "9c64ba683e981a261290c6f1a2f5210156e32dc7",
  "_resolved": "https://registry.npmjs.org/connect-uglify-js/-/connect-uglify-js-0.0.2.tgz"
}
